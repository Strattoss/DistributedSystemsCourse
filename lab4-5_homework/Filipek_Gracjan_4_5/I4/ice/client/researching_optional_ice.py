# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `researching_optional.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module Demo
_M_Demo = Ice.openModule('Demo')
__name__ = 'Demo'

if 'C' not in _M_Demo.__dict__:
    _M_Demo.C = Ice.createTempClass()
    class C(Ice.Value):
        def __init__(self, integer=Ice.Unset):
            self.integer = integer

        def ice_id(self):
            return '::Demo::C'

        @staticmethod
        def ice_staticId():
            return '::Demo::C'

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_C)

        __repr__ = __str__

    _M_Demo._t_C = IcePy.defineValue('::Demo::C', C, -1, (), False, False, None, (('integer', (), IcePy._t_int, True, 1),))
    C._ice_type = _M_Demo._t_C

    _M_Demo.C = C
    del C

if '_t_IntArray' not in _M_Demo.__dict__:
    _M_Demo._t_IntArray = IcePy.defineSequence('::Demo::IntArray', (), IcePy._t_int)

if 'MyException' not in _M_Demo.__dict__:
    _M_Demo.MyException = Ice.createTempClass()
    class MyException(Ice.UserException):
        def __init__(self, code=Ice.Unset):
            self.code = code

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::Demo::MyException'

    _M_Demo._t_MyException = IcePy.defineException('::Demo::MyException', MyException, (), False, None, (('code', (), IcePy._t_int, True, 1),))
    MyException._ice_type = _M_Demo._t_MyException

    _M_Demo.MyException = MyException
    del MyException

_M_Demo._t_OptionalResearchServant = IcePy.defineValue('::Demo::OptionalResearchServant', Ice.Value, -1, (), False, True, None, ())

if 'OptionalResearchServantPrx' not in _M_Demo.__dict__:
    _M_Demo.OptionalResearchServantPrx = Ice.createTempClass()
    class OptionalResearchServantPrx(Ice.ObjectPrx):

        def sendC(self, c, context=None):
            return _M_Demo.OptionalResearchServant._op_sendC.invoke(self, ((c, ), context))

        def sendCAsync(self, c, context=None):
            return _M_Demo.OptionalResearchServant._op_sendC.invokeAsync(self, ((c, ), context))

        def begin_sendC(self, c, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.OptionalResearchServant._op_sendC.begin(self, ((c, ), _response, _ex, _sent, context))

        def end_sendC(self, _r):
            return _M_Demo.OptionalResearchServant._op_sendC.end(self, _r)

        def throwException(self, withOptional, context=None):
            return _M_Demo.OptionalResearchServant._op_throwException.invoke(self, ((withOptional, ), context))

        def throwExceptionAsync(self, withOptional, context=None):
            return _M_Demo.OptionalResearchServant._op_throwException.invokeAsync(self, ((withOptional, ), context))

        def begin_throwException(self, withOptional, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.OptionalResearchServant._op_throwException.begin(self, ((withOptional, ), _response, _ex, _sent, context))

        def end_throwException(self, _r):
            return _M_Demo.OptionalResearchServant._op_throwException.end(self, _r)

        def sequenceMethod(self, intArray, context=None):
            return _M_Demo.OptionalResearchServant._op_sequenceMethod.invoke(self, ((intArray, ), context))

        def sequenceMethodAsync(self, intArray, context=None):
            return _M_Demo.OptionalResearchServant._op_sequenceMethod.invokeAsync(self, ((intArray, ), context))

        def begin_sequenceMethod(self, intArray, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.OptionalResearchServant._op_sequenceMethod.begin(self, ((intArray, ), _response, _ex, _sent, context))

        def end_sequenceMethod(self, _r):
            return _M_Demo.OptionalResearchServant._op_sequenceMethod.end(self, _r)

        def voidMethod(self, context=None):
            return _M_Demo.OptionalResearchServant._op_voidMethod.invoke(self, ((), context))

        def voidMethodAsync(self, context=None):
            return _M_Demo.OptionalResearchServant._op_voidMethod.invokeAsync(self, ((), context))

        def begin_voidMethod(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.OptionalResearchServant._op_voidMethod.begin(self, ((), _response, _ex, _sent, context))

        def end_voidMethod(self, _r):
            return _M_Demo.OptionalResearchServant._op_voidMethod.end(self, _r)

        def optionalParameters(self, integer=Ice.Unset, context=None):
            return _M_Demo.OptionalResearchServant._op_optionalParameters.invoke(self, ((integer, ), context))

        def optionalParametersAsync(self, integer, context=None):
            return _M_Demo.OptionalResearchServant._op_optionalParameters.invokeAsync(self, ((integer, ), context))

        def begin_optionalParameters(self, integer, _response=None, _ex=None, _sent=None, context=None):
            return _M_Demo.OptionalResearchServant._op_optionalParameters.begin(self, ((integer, ), _response, _ex, _sent, context))

        def end_optionalParameters(self, _r):
            return _M_Demo.OptionalResearchServant._op_optionalParameters.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_Demo.OptionalResearchServantPrx.ice_checkedCast(proxy, '::Demo::OptionalResearchServant', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_Demo.OptionalResearchServantPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::Demo::OptionalResearchServant'
    _M_Demo._t_OptionalResearchServantPrx = IcePy.defineProxy('::Demo::OptionalResearchServant', OptionalResearchServantPrx)

    _M_Demo.OptionalResearchServantPrx = OptionalResearchServantPrx
    del OptionalResearchServantPrx

    _M_Demo.OptionalResearchServant = Ice.createTempClass()
    class OptionalResearchServant(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Demo::OptionalResearchServant', '::Ice::Object')

        def ice_id(self, current=None):
            return '::Demo::OptionalResearchServant'

        @staticmethod
        def ice_staticId():
            return '::Demo::OptionalResearchServant'

        def sendC(self, c, current=None):
            raise NotImplementedError("servant method 'sendC' not implemented")

        def throwException(self, withOptional, current=None):
            raise NotImplementedError("servant method 'throwException' not implemented")

        def sequenceMethod(self, intArray, current=None):
            raise NotImplementedError("servant method 'sequenceMethod' not implemented")

        def voidMethod(self, current=None):
            raise NotImplementedError("servant method 'voidMethod' not implemented")

        def optionalParameters(self, integer, current=None):
            raise NotImplementedError("servant method 'optionalParameters' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_Demo._t_OptionalResearchServantDisp)

        __repr__ = __str__

    _M_Demo._t_OptionalResearchServantDisp = IcePy.defineClass('::Demo::OptionalResearchServant', OptionalResearchServant, (), None, ())
    OptionalResearchServant._ice_type = _M_Demo._t_OptionalResearchServantDisp

    OptionalResearchServant._op_sendC = IcePy.Operation('sendC', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_C, False, 0),), (), ((), _M_Demo._t_C, False, 0), ())
    OptionalResearchServant._op_throwException = IcePy.Operation('throwException', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_bool, False, 0),), (), None, (_M_Demo._t_MyException,))
    OptionalResearchServant._op_sequenceMethod = IcePy.Operation('sequenceMethod', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_Demo._t_IntArray, False, 0),), (), ((), _M_Demo._t_IntArray, False, 0), ())
    OptionalResearchServant._op_voidMethod = IcePy.Operation('voidMethod', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    OptionalResearchServant._op_optionalParameters = IcePy.Operation('optionalParameters', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, True, 1),), (), ((), IcePy._t_int, True, 2), ())

    _M_Demo.OptionalResearchServant = OptionalResearchServant
    del OptionalResearchServant

# End of module Demo
